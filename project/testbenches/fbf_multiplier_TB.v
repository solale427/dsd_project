module fbf_multiplier_TB();

    reg clock = 0;
    reg A_stb, B_stb;
    reg reset = 1;
    reg result_ack = 0;
    reg [32 * 4 * 4 - 1:0] A, B;
	wire [3:0] state;
    wire [32 * 4 * 4 - 1:0] result;
    wire ready;
    
    initial
    begin
        forever
            #10 clock = ~clock;
    end
    
    initial
    begin
        A = 512'b
        B = 512'b
       	//A = 512'b0;
        //B = 512'b0;
        A_stb = 1;
        B_stb = 1;
        $monitor("ready: %b result: %b", ready, result);
    end
    
    fbf_multiplier multiplier(
    .A_stb(A_stb),
    .B_stb(B_stb),
    .clk(clock),
    .reset(reset),
    .result_ack(result_ack),
    .A(A),
    .B(B),
    .result_ready(ready),
    .result(result)
);

endmodule